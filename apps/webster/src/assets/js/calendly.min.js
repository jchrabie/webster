!(function () {
  'use strict';
  var e = {
      d: function (t, o) {
        for (var n in o)
          e.o(o, n) &&
            !e.o(t, n) &&
            Object.defineProperty(t, n, { enumerable: !0, get: o[n] });
      },
      o: function (e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      },
      r: function (e) {
        'undefined' != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }),
          Object.defineProperty(e, '__esModule', { value: !0 });
      },
    },
    t = {};
  e.r(t),
    e.d(t, {
      closePopupWidget: function () {
        return w;
      },
      initBadgeWidget: function () {
        return E;
      },
      initInlineWidget: function () {
        return C;
      },
      initPopupWidget: function () {
        return S;
      },
      showPopupWidget: function () {
        return P;
      },
    });
  const o = (e) => {
      ['interactive', 'complete'].includes(document.readyState)
        ? e()
        : document.addEventListener('DOMContentLoaded', e);
    },
    n = (e, t) =>
      Object.fromEntries(Object.entries(e).map(([e, o]) => [t(o, e), o])),
    i = (e) =>
      e
        .split(/(?=[A-Z])/)
        .join('_')
        .toLowerCase(),
    r = (e, t) =>
      Object.fromEntries(Object.entries(e).filter(([e]) => t.includes(e))),
    s = (e) =>
      e
        ? Object.fromEntries(
            e
              .substr(1)
              .split('&')
              .map((e) => e.split('='))
              .map(([e, t]) => [e, decodeURIComponent(t)])
          )
        : [];
  class l {
    isMobile =
      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
        navigator.userAgent
      );
    constructor(e) {
      (this.options = e), this.parseOptions();
    }
    inject() {
      return (
        this.build(),
        this.format(),
        this.parent.appendChild(this.buildSpinner()),
        this.parent.appendChild(this.node)
      );
    }
    parseOptions() {
      if (
        ((this.options = Object.assign({}, { inlineStyles: !1 }, this.options)),
        (this.parent = this.options.parentElement),
        !this.parent)
      )
        throw new Error('Calendly: Parent element not set');
      if (
        (this.parent.jquery && (this.parent = this.parent[0]),
        (this.inlineStyles = this.options.inlineStyles),
        (this.embedType = this.options.embedType),
        (this.url = (this.options.url || this.getUrlFromParent()).split(
          '#'
        )[0]),
        !this.url)
      )
        throw new Error('Calendly: Widget URL not set');
    }
    build() {
      (this.node = document.createElement('iframe')),
        (this.node.src = this.getSource()),
        (this.node.width = '100%'),
        (this.node.height = '100%'),
        (this.node.frameBorder = '0');
    }
    getSource() {
      const e = new URL(this.url, window.location);
      return (e.search = this.getQuery()), e.toString();
    }
    getUrlFromParent() {
      return this.parent.getAttribute('data-url');
    }
    getQuery() {
      return (
        (e = {
          embed_domain: this.getDomain(),
          embed_type: this.embedType,
          ...this.getUtmParamsFromHost(),
          ...this.getParamsFromUrl(),
          ...this.getParamsFromOptions(),
        }),
        `?${Object.entries(e)
          .map(([e, t]) => [e, encodeURIComponent(t)].join('='))
          .join('&')}`
      );
      var e;
    }
    getUtmParamsFromHost() {
      const e = s(new URL(window.location.href).search);
      return r(e, [
        'utm_campaign',
        'utm_source',
        'utm_medium',
        'utm_content',
        'utm_term',
      ]);
    }
    getParamsFromUrl() {
      return s(new URL(this.url, window.location).search);
    }
    getParamsFromOptions() {
      return { ...this.getPrefillParams(), ...this.getUtmParams() };
    }
    getUtmParams() {
      if (!this.options.utm) return [];
      const e = r(this.options.utm, [
        'utmCampaign',
        'utmSource',
        'utmMedium',
        'utmContent',
        'utmTerm',
      ]);
      return n(e, (e, t) => i(t));
    }
    getPrefillParams() {
      if (!this.options.prefill) return [];
      const e = r(this.options.prefill, [
          'name',
          'firstName',
          'lastName',
          'email',
        ]),
        t = n(e, (e, t) => i(t));
      if (this.options.prefill.customAnswers) {
        const e = this.options.prefill.customAnswers;
        Object.entries(e).forEach(([e, o]) => {
          e.match(/^a\d{1,2}$/) && (t[e] = o);
        });
      }
      return t;
    }
    getDomain() {
      return window.location.host;
    }
    format() {
      return this.isMobile ? this.formatMobile() : this.formatDesktop();
    }
    formatDesktop() {
      this.inlineStyles &&
        this.parent.setAttribute(
          'style',
          `position: relative;${this.parent.getAttribute('style')}`
        );
    }
    formatMobile() {
      if (this.inlineStyles) {
        const e = `position: relative;overflow-y:auto;-webkit-overflow-scrolling:touch;${this.parent.getAttribute(
          'style'
        )}`;
        this.parent.setAttribute('style', e);
      }
      this.parent.className += ' calendly-mobile';
    }
    buildSpinner() {
      const e = document.createElement('div');
      return (
        (e.className = 'calendly-spinner'),
        e.appendChild(this.buildBounce(1)),
        e.appendChild(this.buildBounce(2)),
        e.appendChild(this.buildBounce(3)),
        e
      );
    }
    buildBounce(e) {
      const t = document.createElement('div');
      return (t.className = `calendly-bounce${e}`), t;
    }
  }
  class a {
    constructor(e) {
      this.options = e;
    }
    destroy() {
      return this.widget.parentNode.removeChild(this.widget);
    }
    buildWidget() {
      return (
        (this.widget = document.createElement('div')),
        (this.widget.className = 'calendly-badge-widget'),
        this.widget.appendChild(this.buildContent())
      );
    }
    inject() {
      return (
        this.buildWidget(),
        document.body.insertBefore(this.widget, document.body.firstChild)
      );
    }
    buildContent() {
      const e = document.createElement('div');
      return (
        (e.className = 'calendly-badge-content'),
        '#ffffff' === this.options.color && (e.className += ' calendly-white'),
        (e.onclick = this.options.onClick),
        (e.innerHTML = this.options.text),
        (e.style.background = this.options.color),
        (e.style.color = this.options.textColor),
        this.options.branding && e.appendChild(this.buildBranding()),
        e
      );
    }
    buildBranding() {
      const e = document.createElement('span');
      return (e.innerHTML = 'powered by Calendly'), e;
    }
  }
  let d = !1;
  if ('undefined' != typeof window) {
    const e = {
      get passive() {
        d = !0;
      },
    };
    window.addEventListener('testPassive', null, e),
      window.removeEventListener('testPassive', null, e);
  }
  const c =
    'undefined' != typeof window &&
    window.navigator &&
    window.navigator.platform &&
    /iP(ad|hone|od)/.test(window.navigator.platform);
  let u,
    p,
    h = [],
    m = !1,
    g = -1;
  const y = (e) =>
      h.some(
        (t) => !(!t.options.allowTouchMove || !t.options.allowTouchMove(e))
      ),
    b = (e) => {
      const t = e || window.event;
      return (
        !!y(t.target) ||
        t.touches.length > 1 ||
        (t.preventDefault && t.preventDefault(), !1)
      );
    };
  class v {
    constructor(e, t, o, n = {}) {
      (this.close = this.close.bind(this)),
        (this.url = e),
        (this.onClose = t),
        (this.embedType = o),
        (this.options = n);
    }
    show() {
      return this.buildOverlay(), this.insertOverlay(), this.lockPageScroll();
    }
    close() {
      return this.unlockPageScroll(), this.destroyOverlay(), this.onClose();
    }
    buildOverlay() {
      return (
        (this.overlay = document.createElement('div')),
        (this.overlay.className = 'calendly-overlay'),
        this.overlay.appendChild(this.buildCloseOverlay()),
        this.overlay.appendChild(this.buildPopup()),
        this.overlay.appendChild(this.buildCloseButton())
      );
    }
    insertOverlay() {
      return document.body.appendChild(this.overlay);
    }
    buildCloseOverlay() {
      const e = document.createElement('div');
      return (
        (e.className = 'calendly-close-overlay'), (e.onclick = this.close), e
      );
    }
    buildPopup() {
      const e = document.createElement('div');
      return (
        (e.className = 'calendly-popup'),
        e.appendChild(this.buildPopupContent()),
        e
      );
    }
    buildPopupContent() {
      const e = document.createElement('div');
      return (
        (e.className = 'calendly-popup-content'),
        e.setAttribute('data-url', this.url),
        (this.options.parentElement = e),
        (this.options.embedType = this.embedType),
        new l(this.options).inject(),
        e
      );
    }
    buildCloseButton() {
      const e = document.createElement('div');
      return (
        (e.className = 'calendly-popup-close'), (e.onclick = this.close), e
      );
    }
    destroyOverlay() {
      return this.overlay.parentNode.removeChild(this.overlay);
    }
    lockPageScroll() {
      return (
        ((e, t) => {
          if (c) {
            if (!e)
              return void console.error(
                'disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.'
              );
            if (e && !h.some((t) => t.targetElement === e)) {
              const o = { targetElement: e, options: t || {} };
              (h = [...h, o]),
                (e.ontouchstart = (e) => {
                  1 === e.targetTouches.length &&
                    (g = e.targetTouches[0].clientY);
                }),
                (e.ontouchmove = (t) => {
                  1 === t.targetTouches.length &&
                    ((e, t) => {
                      const o = e.targetTouches[0].clientY - g;
                      !y(e.target) &&
                        ((t && 0 === t.scrollTop && o > 0) ||
                        (((e) =>
                          !!e &&
                          e.scrollHeight - e.scrollTop <= e.clientHeight)(t) &&
                          o < 0)
                          ? b(e)
                          : e.stopPropagation());
                    })(t, e);
                }),
                m ||
                  (document.addEventListener(
                    'touchmove',
                    b,
                    d ? { passive: !1 } : void 0
                  ),
                  (m = !0));
            }
          } else {
            ((e) => {
              setTimeout(() => {
                if (void 0 === p) {
                  const t = !!e && !0 === e.reserveScrollBarGap,
                    o =
                      window.innerWidth - document.documentElement.clientWidth;
                  t &&
                    o > 0 &&
                    ((p = document.body.style.paddingRight),
                    (document.body.style.paddingRight = `${o}px`));
                }
                void 0 === u &&
                  ((u = document.body.style.overflow),
                  (document.body.style.overflow = 'hidden'));
              });
            })(t);
            const o = { targetElement: e, options: t || {} };
            h = [...h, o];
          }
        })(this.overlay),
        document.addEventListener('touchmove', this.handleLockedTouchmove, {
          passive: !1,
        })
      );
    }
    unlockPageScroll() {
      return (
        ((e) => {
          if (c) {
            if (!e)
              return void console.error(
                'enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.'
              );
            (e.ontouchstart = null),
              (e.ontouchmove = null),
              (h = h.filter((t) => t.targetElement !== e)),
              m &&
                0 === h.length &&
                (document.removeEventListener(
                  'touchmove',
                  b,
                  d ? { passive: !1 } : void 0
                ),
                (m = !1));
          } else
            (h = h.filter((t) => t.targetElement !== e)),
              h.length ||
                setTimeout(() => {
                  void 0 !== p &&
                    ((document.body.style.paddingRight = p), (p = void 0)),
                    void 0 !== u &&
                      ((document.body.style.overflow = u), (u = void 0));
                });
        })(this.overlay),
        document.removeEventListener('touchmove', this.handleLockedTouchmove, {
          passive: !1,
        })
      );
    }
    handleLockedTouchmove(e) {
      return e.preventDefault();
    }
  }
  const f = {},
    w = () => {
      f.popup && f.popup.close();
    },
    P = (e, t = 'PopupText', o = {}) => {
      w(), (f.popup = new v(e, () => delete f.popup, t, o)), f.popup.show();
    },
    C = (e) => {
      e.url &&
        ((e.parentElement ??=
          document.scripts[document.scripts.length - 1].parentNode),
        o(() => {
          (e.embedType = 'Inline'), new l(e).inject();
        }));
    },
    E = (e) => {
      o(() =>
        ((e) => {
          f.badge && (f.badge.destroy(), delete f.badge);
          const t = ((e) => {
              const t = {};
              return (
                ['color', 'textColor', 'text', 'branding'].forEach((o) => {
                  (t[o] = e[o]), delete e[o];
                }),
                t
              );
            })(e),
            o = { onClick: () => P(e.url, 'PopupWidget', e), ...t };
          (f.badge = new a(o)), f.badge.inject();
        })(e)
      );
    },
    S = (e) => {
      o(() => P(e.url, 'PopupText', e));
    };
  o(() => {
    const e = document.querySelectorAll('.calendly-inline-widget');
    Array.from(e).forEach((e) => {
      ((e) =>
        e.getAttribute('data-processed') ||
        'false' === e.getAttribute('data-auto-load'))(e) ||
        (e.setAttribute('data-processed', !0),
        new l({
          parentElement: e,
          inlineStyles: !0,
          embedType: 'Inline',
        }).inject());
    });
  }),
    (window.Calendly = t);
})();
